
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 05 20:51:34 EDT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 05 20:51:34 EDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\023\002\000\002\002\004\000\002\002" +
    "\004\000\002\024\002\000\002\002\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\002\000\002\025\002\000" +
    "\002\007\006\000\002\026\002\000\002\027\002\000\002" +
    "\030\002\000\002\007\011\000\002\031\002\000\002\007" +
    "\006\000\002\032\002\000\002\033\002\000\002\034\002" +
    "\000\002\007\011\000\002\035\002\000\002\007\010\000" +
    "\002\036\002\000\002\037\002\000\002\040\002\000\002" +
    "\010\012\000\002\041\002\000\002\011\010\000\002\042" +
    "\002\000\002\043\002\000\002\011\010\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\044\002\000" +
    "\002\045\002\000\002\046\002\000\002\010\012\000\002" +
    "\047\002\000\002\013\010\000\002\050\002\000\002\013" +
    "\007\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\051\002\000\002\052\002\000\002\053\002\000" +
    "\002\010\012\000\002\054\002\000\002\012\010\000\002" +
    "\055\002\000\002\012\007\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\014\002\000\002\014\003" +
    "\000\002\056\002\000\002\015\005\000\002\057\002\000" +
    "\002\016\005\000\002\016\002\000\002\060\002\000\002" +
    "\017\005\000\002\017\005\000\002\061\002\000\002\017" +
    "\005\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\004\002\000\002\062\002\000\002\004\006" +
    "\000\002\005\002\000\002\063\002\000\002\005\006\000" +
    "\002\006\003\000\002\006\003\000\002\064\002\000\002" +
    "\006\005\000\002\022\004\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\052\002\001\004\001\005\001\006\001\007" +
    "\001\010\001\011\001\015\001\016\001\017\001\020\001" +
    "\021\001\022\001\023\001\024\001\025\001\026\001\027" +
    "\ufffe\030\ufffe\031\001\001\002\000\006\027\041\030\040" +
    "\001\002\000\004\002\236\001\002\000\046\002\ufffa\004" +
    "\033\005\013\006\023\007\016\010\027\011\011\015\007" +
    "\016\030\017\022\020\024\021\017\022\012\023\015\024" +
    "\032\025\025\026\014\031\031\001\002\000\006\027\uffd4" +
    "\030\uffd4\001\002\000\010\027\ufff3\030\ufff3\034\ufff1\001" +
    "\002\000\010\027\uffeb\030\uffeb\034\uffeb\001\002\000\010" +
    "\027\uffb5\030\uffb5\034\uffb5\001\002\000\010\027\uffbc\030" +
    "\uffbc\034\uffbc\001\002\000\010\027\uffb1\030\uffb1\034\uffb1" +
    "\001\002\000\010\027\uffb4\030\uffb4\034\uffb4\001\002\000" +
    "\010\027\uffba\030\uffba\034\uffba\001\002\000\010\027\uffb6" +
    "\030\uffb6\034\uffb6\001\002\000\004\002\000\001\002\000" +
    "\046\002\ufffa\004\033\005\013\006\023\007\016\010\027" +
    "\011\011\015\007\016\030\017\022\020\024\021\017\022" +
    "\012\023\015\024\032\025\025\026\014\031\031\001\002" +
    "\000\010\027\uffb8\030\uffb8\034\uffb8\001\002\000\010\027" +
    "\uffbb\030\uffbb\034\uffbb\001\002\000\010\027\uffb7\030\uffb7" +
    "\034\uffb7\001\002\000\010\027\uffb2\030\uffb2\034\uffb2\001" +
    "\002\000\046\002\ufffa\004\033\005\013\006\023\007\016" +
    "\010\027\011\011\015\007\016\030\017\022\020\024\021" +
    "\017\022\012\023\015\024\032\025\025\026\014\031\031" +
    "\001\002\000\010\027\uffb9\030\uffb9\034\uffb9\001\002\000" +
    "\006\027\uffdf\030\uffdf\001\002\000\006\035\uffed\036\uffed" +
    "\001\002\000\010\027\uffb3\030\uffb3\034\uffb3\001\002\000" +
    "\010\027\uffbd\030\uffbd\034\uffbd\001\002\000\010\027\ufff9" +
    "\030\ufff9\034\ufff7\001\002\000\004\034\051\001\002\000" +
    "\006\027\041\030\040\001\002\000\056\002\uffb0\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0\034" +
    "\044\001\002\000\056\002\uffaa\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\031\uffaa\034\uffaa\001\002\000" +
    "\062\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa8\030\uffa8\031\uffa9\034\uffa9\001\002\000" +
    "\006\027\041\030\040\001\002\000\056\002\uffa7\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\031\uffa7\034" +
    "\uffa7\001\002\000\006\027\uffaf\030\uffaf\001\002\000\054" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\031\ufff8\001\002\000\006\027\041\030\040\001\002" +
    "\000\056\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\031\uffb0\034\044\001\002\000\054\002\uffae" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\031" +
    "\uffae\001\002\000\006\027\ufff6\030\ufff6\001\002\000\006" +
    "\027\041\030\040\001\002\000\056\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\031\ufff5\034\ufff5" +
    "\001\002\000\056\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\031\uffb0\034\044\001\002\000\054" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\031\ufff4\001\002\000\006\035\057\036\uffc9\001\002" +
    "\000\004\036\uffc8\001\002\000\004\036\061\001\002\000" +
    "\012\032\uffc7\033\uffc7\036\uffc7\037\uffc7\001\002\000\010" +
    "\032\065\033\066\037\063\001\002\000\010\032\uffc2\033" +
    "\uffc2\037\uffc2\001\002\000\056\002\uffb0\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0\034\044\001" +
    "\002\000\006\027\uffbf\030\uffbf\001\002\000\004\036\061" +
    "\001\002\000\010\032\065\033\066\037\063\001\002\000" +
    "\056\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\031\uffc0\034\uffc0\001\002\000\006\027\041\030" +
    "\040\001\002\000\056\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\031\uffbe\034\uffbe\001\002\000" +
    "\054\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\031\uffec\001\002\000\010\032\065\033\066\037" +
    "\063\001\002\000\056\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\031\uffc1\034\uffc1\001\002\000" +
    "\012\032\uffc3\033\uffc3\036\077\037\uffc3\001\002\000\012" +
    "\032\uffc5\033\uffc5\036\uffc5\037\uffc5\001\002\000\010\032" +
    "\uffc6\033\uffc6\037\uffc6\001\002\000\012\032\uffc3\033\uffc3" +
    "\036\077\037\uffc3\001\002\000\010\032\uffc4\033\uffc4\037" +
    "\uffc4\001\002\000\006\027\041\030\040\001\002\000\050" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013" +
    "\uffde\014\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\031\uffde\034\uffde\001" +
    "\002\000\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0" +
    "\034\044\001\002\000\046\004\033\005\013\006\023\007" +
    "\016\010\027\012\107\013\112\014\110\016\114\017\022" +
    "\020\024\021\017\022\012\023\015\024\032\025\025\026" +
    "\014\031\031\001\002\000\006\027\041\030\040\001\002" +
    "\000\006\027\041\030\040\001\002\000\056\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd" +
    "\034\uffdd\001\002\000\006\027\041\030\040\001\002\000" +
    "\046\004\033\005\013\006\023\007\016\010\027\012\107" +
    "\013\112\014\110\016\114\017\022\020\024\021\017\022" +
    "\012\023\015\024\032\025\025\026\014\031\031\001\002" +
    "\000\006\027\uffd9\030\uffd9\001\002\000\006\027\041\030" +
    "\040\001\002\000\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\031\uffb0\034\044\001\002\000\046\004\033\005\013\006" +
    "\023\007\016\010\027\012\107\013\112\014\110\016\114" +
    "\017\022\020\024\021\017\022\012\023\015\024\032\025" +
    "\025\026\014\031\031\001\002\000\056\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\034" +
    "\uffd8\001\002\000\056\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\031\uffd7\034\uffd7\001\002\000" +
    "\056\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\031\uffd6\034\uffd6\001\002\000\056\002\uffb0\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0" +
    "\034\044\001\002\000\054\002\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\031\uffdc\001\002\000\056" +
    "\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\031\uffd5\034\uffd5\001\002\000\012\011\uffdb\015\uffdb" +
    "\016\uffdb\034\uffdb\001\002\000\012\011\uffb0\015\uffb0\016" +
    "\uffb0\034\044\001\002\000\010\011\011\015\007\016\030" +
    "\001\002\000\046\004\033\005\013\006\023\007\016\010" +
    "\027\012\107\013\112\014\110\016\114\017\022\020\024" +
    "\021\017\022\012\023\015\024\032\025\025\026\014\031" +
    "\031\001\002\000\056\002\uffda\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\031\uffda\034\uffda\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\ufffb\001\002\000\010" +
    "\027\041\030\040\034\140\001\002\000\050\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\031\uffa5\034\uffa5\001\002\000\050" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\031\uffea\034\uffea\001" +
    "\002\000\006\027\041\030\040\001\002\000\050\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\031\uffa6\034\uffa6\001\002\000" +
    "\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0\034\044" +
    "\001\002\000\046\004\033\005\013\006\023\007\016\010" +
    "\027\011\145\012\144\013\147\014\146\017\022\020\024" +
    "\021\017\022\012\023\015\024\032\025\025\026\014\031" +
    "\031\001\002\000\006\027\041\030\040\001\002\000\010" +
    "\027\uffe5\030\uffe5\034\uffe5\001\002\000\006\027\041\030" +
    "\040\001\002\000\006\027\041\030\040\001\002\000\046" +
    "\004\033\005\013\006\023\007\016\010\027\011\145\012" +
    "\144\013\147\014\146\017\022\020\024\021\017\022\012" +
    "\023\015\024\032\025\025\026\014\031\031\001\002\000" +
    "\056\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\031\uffe9\034\uffe9\001\002\000\056\002\uffb0\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0" +
    "\034\044\001\002\000\054\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\031\uffe8\001\002\000\056" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\031\uffe2\034\uffe2\001\002\000\056\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\034" +
    "\uffe1\001\002\000\056\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\031\uffe0\034\uffe0\001\002\000" +
    "\010\027\041\030\040\034\140\001\002\000\050\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\031\uffe4\034\uffe4\001\002\000" +
    "\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0\034\044" +
    "\001\002\000\046\004\033\005\013\006\023\007\016\010" +
    "\027\011\145\012\144\013\147\014\146\017\022\020\024" +
    "\021\017\022\012\023\015\024\032\025\025\026\014\031" +
    "\031\001\002\000\056\002\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\031\uffe3\034\uffe3\001\002\000" +
    "\012\011\uffe7\015\uffe7\016\uffe7\034\uffe7\001\002\000\012" +
    "\011\uffb0\015\uffb0\016\uffb0\034\044\001\002\000\010\011" +
    "\011\015\007\016\030\001\002\000\046\004\033\005\013" +
    "\006\023\007\016\010\027\011\145\012\144\013\147\014" +
    "\146\017\022\020\024\021\017\022\012\023\015\024\032" +
    "\025\025\026\014\031\031\001\002\000\056\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\031\uffe6" +
    "\034\uffe6\001\002\000\004\034\201\001\002\000\006\027" +
    "\041\030\040\001\002\000\056\002\uffad\004\uffad\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\031\uffad\034\175\001" +
    "\002\000\054\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\031\ufff2\001\002\000\006\027\uffac\030" +
    "\uffac\001\002\000\006\027\041\030\040\001\002\000\056" +
    "\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\031\uffad\034\175\001\002\000\054\002\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\031\uffab\001" +
    "\002\000\006\027\ufff0\030\ufff0\001\002\000\006\027\041" +
    "\030\040\001\002\000\056\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\031\uffef\034\uffef\001\002" +
    "\000\056\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\031\uffb0\034\044\001\002\000\054\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\031" +
    "\uffee\001\002\000\006\027\041\030\040\001\002\000\050" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\031\uffd3\034\uffd3\001" +
    "\002\000\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0" +
    "\034\044\001\002\000\046\004\033\005\013\006\023\007" +
    "\016\010\027\012\213\013\215\014\214\015\212\017\022" +
    "\020\024\021\017\022\012\023\015\024\032\025\025\026" +
    "\014\031\031\001\002\000\006\027\uffce\030\uffce\001\002" +
    "\000\006\027\041\030\040\001\002\000\006\027\041\030" +
    "\040\001\002\000\006\027\041\030\040\001\002\000\056" +
    "\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\031\uffd2\034\uffd2\001\002\000\046\004\033\005\013" +
    "\006\023\007\016\010\027\012\213\013\215\014\214\015" +
    "\212\017\022\020\024\021\017\022\012\023\015\024\032" +
    "\025\025\026\014\031\031\001\002\000\056\002\uffcc\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\031\uffcc" +
    "\034\uffcc\001\002\000\056\002\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0\034\044\001\002" +
    "\000\054\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\031\uffd1\001\002\000\056\002\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\031\uffcb\034" +
    "\uffcb\001\002\000\056\002\uffca\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\031\uffca\034\uffca\001\002\000" +
    "\012\011\uffd0\015\uffd0\016\uffd0\034\uffd0\001\002\000\012" +
    "\011\uffb0\015\uffb0\016\uffb0\034\044\001\002\000\010\011" +
    "\011\015\007\016\030\001\002\000\046\004\033\005\013" +
    "\006\023\007\016\010\027\012\213\013\215\014\214\015" +
    "\212\017\022\020\024\021\017\022\012\023\015\024\032" +
    "\025\025\026\014\031\031\001\002\000\056\002\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf" +
    "\034\uffcf\001\002\000\006\027\041\030\040\001\002\000" +
    "\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0\034\044" +
    "\001\002\000\046\004\033\005\013\006\023\007\016\010" +
    "\027\012\213\013\215\014\214\015\212\017\022\020\024" +
    "\021\017\022\012\023\015\024\032\025\025\026\014\031" +
    "\031\001\002\000\056\002\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\031\uffcd\034\uffcd\001\002\000" +
    "\004\002\uffff\001\002\000\046\002\ufffa\004\033\005\013" +
    "\006\023\007\016\010\027\011\011\015\007\016\030\017" +
    "\022\020\024\021\017\022\012\023\015\024\032\025\025" +
    "\026\014\031\031\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\010\002\004\023\005\024\003\001\001\000" +
    "\004\006\236\001\001\000\002\001\001\000\014\003\017" +
    "\007\025\010\020\020\033\021\007\001\001\000\004\051" +
    "\205\001\001\000\006\031\171\032\170\001\001\000\004" +
    "\036\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\133\007\025\010" +
    "\020\020\033\021\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\132\007\025\010\020\020\033\021\007\001\001\000\002" +
    "\001\001\000\004\044\102\001\001\000\004\035\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\035" +
    "\026\034\001\001\000\002\001\001\000\004\006\036\001" +
    "\001\000\004\004\044\001\001\000\002\001\001\000\004" +
    "\064\041\001\001\000\004\006\042\001\001\000\002\001" +
    "\001\000\004\062\045\001\001\000\002\001\001\000\004" +
    "\006\046\001\001\000\004\004\047\001\001\000\002\001" +
    "\001\000\004\027\051\001\001\000\004\006\052\001\001" +
    "\000\004\030\053\001\001\000\004\004\054\001\001\000" +
    "\002\001\001\000\004\014\057\001\001\000\002\001\001" +
    "\000\004\015\061\001\001\000\004\056\075\001\001\000" +
    "\004\017\063\001\001\000\004\060\073\001\001\000\004" +
    "\004\072\001\001\000\004\061\070\001\001\000\004\015" +
    "\066\001\001\000\004\017\067\001\001\000\002\001\001" +
    "\000\004\006\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\074\001\001\000\002\001\001\000\004" +
    "\016\077\001\001\000\004\057\100\001\001\000\002\001" +
    "\001\000\004\016\101\001\001\000\002\001\001\000\004" +
    "\006\103\001\001\000\004\045\104\001\001\000\004\004" +
    "\105\001\001\000\012\007\112\013\110\020\033\021\007" +
    "\001\001\000\004\006\125\001\001\000\004\006\124\001" +
    "\001\000\004\046\122\001\001\000\004\006\121\001\001" +
    "\000\012\007\112\013\120\020\033\021\007\001\001\000" +
    "\004\050\114\001\001\000\004\006\115\001\001\000\004" +
    "\004\116\001\001\000\012\007\112\013\117\020\033\021" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\126\001\001\000\004\004\127" +
    "\001\001\000\004\010\130\001\001\000\012\007\112\013" +
    "\131\020\033\021\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\135\022\136\001" +
    "\001\000\002\001\001\000\004\037\141\001\001\000\004" +
    "\006\140\001\001\000\002\001\001\000\004\004\142\001" +
    "\001\000\012\007\147\011\150\020\033\021\007\001\001" +
    "\000\004\006\163\001\001\000\004\042\156\001\001\000" +
    "\004\006\155\001\001\000\004\006\154\001\001\000\012" +
    "\007\147\011\153\020\033\021\007\001\001\000\004\040" +
    "\151\001\001\000\004\004\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\135\022\157\001\001\000\004\043\160\001\001" +
    "\000\004\004\161\001\001\000\012\007\147\011\162\020" +
    "\033\021\007\001\001\000\002\001\001\000\004\041\164" +
    "\001\001\000\004\004\165\001\001\000\004\010\166\001" +
    "\001\000\012\007\147\011\167\020\033\021\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\172\001" +
    "\001\000\004\005\173\001\001\000\002\001\001\000\004" +
    "\063\175\001\001\000\004\006\176\001\001\000\004\005" +
    "\177\001\001\000\002\001\001\000\004\033\201\001\001" +
    "\000\004\006\202\001\001\000\004\034\203\001\001\000" +
    "\004\004\204\001\001\000\002\001\001\000\004\006\206" +
    "\001\001\000\004\052\207\001\001\000\004\004\210\001" +
    "\001\000\012\007\216\012\215\020\033\021\007\001\001" +
    "\000\004\055\231\001\001\000\004\006\224\001\001\000" +
    "\004\006\223\001\001\000\004\006\222\001\001\000\004" +
    "\053\220\001\001\000\012\007\216\012\217\020\033\021" +
    "\007\001\001\000\002\001\001\000\004\004\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\225\001\001\000\004\004\226\001\001\000\004" +
    "\010\227\001\001\000\012\007\216\012\230\020\033\021" +
    "\007\001\001\000\002\001\001\000\004\006\232\001\001" +
    "\000\004\004\233\001\001\000\012\007\216\012\234\020" +
    "\033\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\237\007\025\010\020\020\033\021\007\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	        lexer = new Yylex(System.in); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.yylex();  
    }

	public Yylex lexer;
 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

  

	static final int C_TL=0;
	static final int C_AU=1;
	static final int C_AI=2;
	static final int C_DS=3;
	static final int C_DE=4;
	static final int C_IP=5;
	static final int C_RS=6;
	static final int C_RE=7;
	static final int C_LP=8;
	static final int C_NH=9;
	static final int C_SH=10;
	static final int C_PP=11;
	static final int C_B=12;
	static final int C_I=13;
	static final int C_R=14;
	static final int C_LG=15;
	static final int C_NL=16;
	static final int C_SM=17;
	static final int C_UL=18;
	static final int C_TS=19;
	static final int C_TE=20;
	static final int C_N_L=21;
	static final int C_O_UL=22;
	static final int C_O_OL=23;
	static final int C_O_DL=24;
	static final int C_O_TR=25;
	static final int C_O_TD=26;
	
	static String code_table[][]= 
		{{"<BR><CENTER><H1>","</H1></CENTER>"},	// TL
		 {"<BR><CENTER><I>","</I></CENTER>"},	// AU	
		 {"<BR><CENTER><B>","</B></CENTER>"},	// AI
		 {"",""},				// DS
		 {"",""},				// DE
		 {"<DT>","<DD>"},			// IP
		 {"",""},				// LP
		 {"",""},				// RS
		 {"",""},				// RE
		 {"<LI>",""},				// NH	
		 {"<LI>",""},				// SH
		 {"<P>",""},				// PP
		 {"<B>","</B>"},			// B
		 {"<I>","</I>"},			// I
		 {"",""},				// R
		 {"<BIG>","</BIG>"},			// LG
		 {"",""},				// NL 
		 {"<SMALL>","</SMALL>"},		// SM
		 {"<U>","</U>"},			// UL
		 {"<TABLE",">"},			// TS 
		 {"</TABLE>",""},			// TE 
		 {"<BR>","<BR><BR>"},			// N_L (own New Line)
		 {"<UL>","</UL>"},			// O_UL (Own Unordered List)
		 {"<OL>","</OL>"},			// O_OL (own Ordered List)
		 {"<DL>","</DL>"},			// O_DL (own Descritive List)
		 {"<TR>","</TR>"},			// O_TR (own Table Row)
		 {"<TD","</TD>"}			// O_TD (own Table Column)
		};
		
 	boolean center, box; 
	String tab= new String("");
	int row_n, row_max, n_columns;
	String rows[][];

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // argument ::= new_line 
            {
              str_token RESULT =null;
		 RESULT.str_val= ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // argument ::= TXT new_line 
            {
              str_token RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT.str_val= n.str_val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // new_line ::= N_L NT$33 new_line 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_line",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$33 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_N_L][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // new_line ::= N_L 
            {
              symbol RESULT =null;
		 System.out.println(code_table[C_N_L][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_line",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // new_line ::= CR 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_line",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // text_nl ::= TXT NT$32 new_line text_nl 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$32 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(n.str_val+"<BR>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // text_nl ::= 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_nl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // text ::= TXT NT$31 new_line text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$31 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(n.str_val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // text ::= 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tag ::= UL 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_UL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tag ::= SM 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_SM; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tag ::= NL 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_NL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tag ::= LG 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_LG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tag ::= R 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_R; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tag ::= I 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_I; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tag ::= B 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_B; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tag ::= PP 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_PP; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tag ::= DE 
            {
              int_token RESULT =null;
		 System.out.println(code_table[C_O_TD][1]);
	   System.out.println(code_table[C_O_TR][1]);
	   System.out.println(code_table[C_TE][0]);
	   RESULT.int_val = C_DE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tag_nl ::= DS 
            {
              int_token RESULT =null;
		 System.out.println(code_table[C_TS][0]+code_table[C_TS][1]); 
	   System.out.println(code_table[C_O_TR][0]);
	   System.out.println(code_table[C_O_TD][0]+">");
	   System.out.println(code_table[C_O_TD][1]);
	   System.out.println(code_table[C_O_TD][0]+">"); 
	   RESULT.int_val = C_DS; 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_nl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tag_nl ::= AI 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_AI; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_nl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tag_nl ::= AU 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_AU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_nl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tag ::= TL 
            {
              int_token RESULT =null;
		 RESULT.int_val = C_TL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rows ::= TE NT$30 new_line 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rows",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$30 ::= 
            {
              symbol RESULT =null;

	  System.out.println(code_table[C_TE][0]);
	  if(box) {
		System.out.println(code_table[C_O_TD][1]);
		System.out.println(code_table[C_O_TR][1]);
		System.out.println(code_table[C_TE][0]);
	  }
	  if(center)  System.out.println("</CENTER>");
	  System.out.println("<BR>");	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rows ::= TC_ format rows 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rows",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rows ::= T_ROW NT$29 rows 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		str_token m = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rows",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$29 ::= 
            {
              symbol RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token m = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

 	  System.out.println(code_table[C_O_TR][0]); 
 	  StringTokenizer subst=new StringTokenizer(m.str_val,tab);
 	  int j=0;
	  while ((j<n_columns)&&(subst.hasMoreTokens())) {
		if (!rows[row_n][j].equals("s")) {
			int aux=j+1;
			int n_span=1;
			while ((aux<n_columns)&&(rows[row_n][aux].equals("s"))) {
				n_span++;
				aux++;
			}
			System.out.print(code_table[C_O_TD][0]);
			char cell=rows[row_n][j].charAt(0);
			switch (cell) {
			  case 'c':	System.out.print(" ALIGN=CENTER");
			  	break;
			  case 'l':	System.out.print(" ALIGN=LEFT");
			  	break;
			  case 'n': 	System.out.print(" ALIGN=RIGHT");
			  	break;
			  case 'r': 	System.out.print(" ALIGN=RIGHT");
			  	break;
			  default: break;
			}
			System.out.print(" COLSPAN="+n_span);
			System.out.print(" > ");
			System.out.print(subst.nextToken());
			System.out.println(code_table[C_O_TD][1]);
		}
		j++;
	  }
	  if(row_max>row_n) row_n++;
	  System.out.println(code_table[C_O_TR][1]);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // format2 ::= 
            {
              symbol RESULT =null;
		 row_max=row_n;
	   row_n=0;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("format2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // format2 ::= T_FORM NT$28 format2 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("format2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$28 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	  StringTokenizer subst= new StringTokenizer(n.str_val," ");
	  int j=0;
	  row_n++;
	  while (subst.hasMoreTokens()) {
		rows[row_n][j]= subst.nextToken();
		j++;
	  } 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // format ::= T_FORM NT$27 format2 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("format",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$27 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	  StringTokenizer subst= new StringTokenizer(n.str_val," ");
	  n_columns=subst.countTokens();
	  rows = new String [99][n_columns];
	  
	  row_n=0; 		
	  int j=0;
	  while (subst.hasMoreTokens()) {
		rows[row_n][j]= subst.nextToken();
		j++;
	  }  
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // options ::= T_OPT 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  System.out.println("<BR>");
	  if((n.str_val).indexOf("center") != -1) {
	  	System.out.println("<CENTER>");  
		center=true;
	  }	
	  System.out.print(code_table[C_TS][0]); 
	  boolean expand=false;	
	  if((n.str_val).indexOf("expand") != -1) {
	  	System.out.print(" WIDTH=100%");
		expand=true;
	  }
	  int pos=(n.str_val).indexOf("tab(");
	  if( pos!= -1) {
	  	tab=(n.str_val).substring(pos+4,pos+5);
	  }
	  
	  if((n.str_val).indexOf("doublebox") != -1) {
		System.out.print(" BORDER=3");
		System.out.println(code_table[C_TS][1]); 
		System.out.println(code_table[C_O_TR][0]); 
		System.out.println(code_table[C_O_TD][0]+">"); 
		System.out.print(code_table[C_TS][0]); 
		if(expand)
		  	System.out.print(" WIDTH=100%");
		System.out.println(code_table[C_TS][1]); 
		box=true;
	  }
	  else 
	  if((n.str_val).indexOf("allbox") != -1)
	  {	System.out.print(" BORDER");
		System.out.println(code_table[C_TS][1]);
	  }
	  else 
	  if((n.str_val).indexOf("box") != -1)
	  {	System.out.print(" BORDER");
		System.out.println(code_table[C_TS][1]); 
		System.out.println(code_table[C_O_TR][0]); 
		System.out.println(code_table[C_O_TD][0]+">"); 
		System.out.print(code_table[C_TS][0]); 
		if(expand)
		  	System.out.print(" WIDTH=100%");
		System.out.println(code_table[C_TS][1]); 
		box=true;
	  }	
	  else
		System.out.println(code_table[C_TS][1]); 

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // options ::= 
            {
              symbol RESULT =null;
		
	  System.out.println("<BR>");
	  System.out.print(code_table[C_TS][0]);
	  System.out.println(code_table[C_TS][1]);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // nh_list ::= LP new_line 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nh_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nh_list ::= RE new_line 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nh_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nh_list ::= commons nh_list 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nh_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // nh_list ::= NH NT$26 new_line text nh_list 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nh_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$26 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_NH][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nh_list ::= RS new_line NT$25 text nesteds nh_list 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nh_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$25 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_N_L][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nesteds ::= NH NT$22 new_line NT$23 text nh_list NT$24 text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nesteds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$24 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 System.out.println(code_table[C_O_OL][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$23 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.println(code_table[C_NH][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$22 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_O_OL][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sh_list ::= LP new_line 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sh_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sh_list ::= RE new_line 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sh_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sh_list ::= commons sh_list 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sh_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sh_list ::= SH NT$21 new_line text sh_list 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sh_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$21 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_SH][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sh_list ::= RS new_line NT$20 text nesteds sh_list 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sh_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$20 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_N_L][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nesteds ::= SH NT$17 new_line NT$18 text sh_list NT$19 text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nesteds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$19 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 System.out.println(code_table[C_O_UL][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$18 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.println(code_table[C_SH][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$17 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_O_UL][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ip_list ::= LP new_line 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ip_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ip_list ::= RE new_line 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ip_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ip_list ::= commons ip_list 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ip_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ip_list ::= IP NT$15 argument NT$16 text ip_list 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ip_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$16 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(n.str_val);  System.out.println(code_table[C_IP][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$15 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_IP][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ip_list ::= RS new_line NT$14 text nesteds ip_list 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ip_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$14 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_N_L][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nesteds ::= IP NT$11 argument NT$12 text ip_list NT$13 text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nesteds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$13 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 System.out.println(code_table[C_O_DL][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$12 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token n = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(n.str_val);  System.out.println(code_table[C_IP][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$11 ::= 
            {
              symbol RESULT =null;
 System.out.println(code_table[C_O_DL][0]);  System.out.println(code_table[C_IP][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // commons ::= TS NT$10 options format rows text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commons",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$10 ::= 
            {
              symbol RESULT =null;

		center=false;
		box=false;
		tab="\t";	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // commons ::= tag_nl NT$7 TXT NT$8 new_line NT$9 text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		str_token t = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commons",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$9 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		str_token t = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 System.out.println(code_table[n.int_val][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token t = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(t.str_val+" <BR>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(code_table[n.int_val][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // commons ::= tag_nl NT$6 new_line text_nl 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(code_table[n.int_val][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commons",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(code_table[n.int_val][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // commons ::= tag NT$3 TXT NT$4 new_line NT$5 text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		str_token t = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commons",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		str_token t = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 System.out.println(code_table[n.int_val][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              symbol RESULT =(symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		str_token t = (str_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(t.str_val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(code_table[n.int_val][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // commons ::= tag NT$2 new_line text 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(code_table[n.int_val][1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commons",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int_token n = (int_token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(code_table[n.int_val][0]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= nesteds body 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= commons body 
            {
              symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= NT$1 new_line body 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("</BODY>\n</HTML>\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              symbol RESULT =null;
 System.out.println("<HTML>\n<HEAD>\n</HEAD>\n<BODY>\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		symbol start_val = (symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= NT$0 body 
            {
              symbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("</BODY>\n</HTML>\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              symbol RESULT =null;
 System.out.println("<HTML>\n<HEAD>\n</HEAD>\n<BODY>\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

